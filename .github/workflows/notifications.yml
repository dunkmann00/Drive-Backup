name: Notifications Build

on:
  push:


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  mac_notifications:
    name: Build macOS Notification App
    runs-on: macos-14
    defaults:
      run:
        shell: bash
    env:
      PROJECT_NAME: Drive Backup Notifications
      NOTIFICATION_PROJECT_PATH: ${{ github.workspace }}/src/drive_backup/core/notifications/mac
    steps:
      - name: Setup Xcode
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md#xcode
        run: sudo xcode-select -s /Applications/Xcode_15.3.app
      - name: Setup Env Variables
        run: |
          EXPORT_PATH="$NOTIFICATION_PROJECT_PATH/dist"
          echo "EXPORT_PATH=$EXPORT_PATH" >> "$GITHUB_ENV"
          echo "BUILD_PATH=$NOTIFICATION_PROJECT_PATH/build" >> "$GITHUB_ENV"
          echo "APP_PATH=$EXPORT_PATH/$PROJECT_NAME.app" >> "$GITHUB_ENV"
          echo "ZIP_PATH=$EXPORT_PATH/$PROJECT_NAME.zip" >> "$GITHUB_ENV"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup keychain
        uses: ./.github/actions/setup-keychain
        with:
          macos-certificate: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          macos-certificate-pwd: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          macos-ci-keychain-pwd: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      - name: Build Xcode Archive
        run: xcodebuild -disableAutomaticPackageResolution -project "$NOTIFICATION_PROJECT_PATH/$PROJECT_NAME/$PROJECT_NAME.xcodeproj" -scheme "$PROJECT_NAME" -sdk macosx -destination 'generic/platform=macOS' -archivePath "$BUILD_PATH/$PROJECT_NAME.xcarchive" clean archive
      - name: Export Xcode Archive
        run: xcodebuild -exportArchive -archivePath "$BUILD_PATH/$PROJECT_NAME.xcarchive" -exportOptionsPlist "$NOTIFICATION_PROJECT_PATH/ExportOptions.plist" -exportPath $EXPORT_PATH
      - name: Notarize App
        env:
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          echo "Create Zip Archive"
          ditto -c -k --keepParent "$APP_PATH" "$ZIP_PATH"

          # Here we send the notarization request to Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. We pass in all the credentials, including the password so that we can prevent a
          # UI password dialog from blocking the CI

          echo "Notarize app"
          xcrun notarytool submit "$ZIP_PATH" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "$APP_PATH"
      - name: Zip App Bundle
        run: |
          # We need to Zip the app again to upload the stapled version as an artifact.
          rm "$ZIP_PATH"
          ditto -c -k --keepParent "$APP_PATH" "$ZIP_PATH"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.PROJECT_NAME }}-macos"
          path: "${{ env.ZIP_PATH }}"
          retention-days: 1
  windows_notifications:
    name: Build Windows Notification App
    runs-on: windows-2022
    env:
      PROJECT_NAME: Drive Backup Notifications
      NOTIFICATION_PROJECT_PATH: ${{ github.workspace }}\src\drive_backup\core\notifications\windows
    steps:
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Env Variables
        run: |
          $BUILD_PATH="$env:NOTIFICATION_PROJECT_PATH\build"
          echo "BUILD_PATH=$BUILD_PATH" >> "$env:GITHUB_ENV"
          echo "EXE_PATH=$BUILD_PATH\$env:PROJECT_NAME.exe" >> "$env:GITHUB_ENV"
          echo "ZIP_PATH=$BUILD_PATH\$env:PROJECT_NAME.zip" >> "$env:GITHUB_ENV"
      - name: Build VS Project
        run: msbuild "$env:NOTIFICATION_PROJECT_PATH\$env:PROJECT_NAME\$env:PROJECT_NAME.vcxproj" -t:rebuild -verbosity:diag -property:Configuration=Release -property:Platform=x64 -property:OutDir="$env:BUILD_PATH\"
      - name: Zip App
        run: Compress-Archive -Path "$env:EXE_PATH" -DestinationPath "$env:ZIP_PATH"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.PROJECT_NAME }}-windows"
          path: "${{ env.ZIP_PATH }}"
          retention-days: 1
